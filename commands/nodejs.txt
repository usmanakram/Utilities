=====================
START: Install NodeJS
=====================
To install nvm
  $ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash

To verify that nvm has been installed, do:
  $ command -v nvm

If nothing happened, restart terminal

Now, you can ask NVM which versions of Node are available:
  $ nvm list-remote

To install the latest stable LTS release of Node.js (recommended):
  $ nvm install node --lts

For instance, to get version v13.6.0, you can type:
  $ nvm install v13.6.0

You can see the different versions you have installed by typing:
  $ nvm list


Reference:
  https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-20-04
  https://docs.microsoft.com/en-us/windows/nodejs/setup-on-wsl2
===================
END: Install NodeJS
===================


To see the installed version of npm
	$ npm -v
	OR
	$ npm --version

To upgrade npm
	$ npm install npm@latest -g

To get help
	$ npm help
	OR
	$ npm

Create "package.json"
	$ npm init

Create "package.json" with default configuration values
	$ npm init -y
	OR
	$ npm init --yes

Set default configuration
	$ npm config set init-author-name "Usman Akram"
	OR
	$ npm set init-author-name "Usman Akram"

Get default configuration
	$ npm config get init-author-name
	OR
	$ npm get init-author-name

Remove default configuration
	$ npm config delete init-author-name
	OR
	$ npm delete init-author-name

Install package
	$ npm install <package name>
	For specific version
	$ npm install <package name>@<version>
	OR install as a dev dependency
	$ npm install <package name> --save-dev
	OR
	$ npm install <package name> -D
	For global
	$ npm install -g <package name>

Remove packages
	$ npm uninstall <package name>
	OR
	$ npm un <package name>
	OR
	$ npm remove <package name>
	For global
	$ npm remove -g <package name>

Find global package root folder
	$ npm root -g
	(In case of nvm, however, that location would differ.)


Example: "lodash": "^4.17.4"
	Having version number with "^" means "npm install" will install latest minor version.
	Having version number with "~" means "npm install" will install latest patch version.

Example: "lodash": "4.17.4"
	Having version number without any symbol means "npm install" will install exact version.

Example: "lodash": "*"
	Having version number as "*" means "npm install" will install latest major version.


Update installed module version
	$ npm update <package name>

To see the latest version of all the npm package installed, including their dependencies:
	$ npm list
	$ npm list --depth 0
	$ npm list --depth 1

For global packages
	$ npm list -g

You can get the version of a specific package by specifying the name:
	$ npm list [package name]

To view package detail
	$ npm view [package name]

If you want to see any specific property of project.json, run
	$ npm view [package name] [property name]
	i.e.
	$ npm view [package name] dependencies

To view latest available version
	$ npm view [package name] version

For list down all released versions
	$ npm view [package name] versions

Install Live Server locally
	$ npm install live-server --save-dev

To install only regular dependencies (DevDependencies will be ignored)
	$ npm install --production

To display outdated packages
	$ npm outdated

To upgrade (upto allowed limit specified in package.json) outdated packages
	$ npm update

To upgrade depencencies to very latest version, we need another package to update our 'package.json'
	$ npm i -g npm-check-updates

To upgrade all the version hints in the package.json file, to dependencies and devDependencies, so npm can install the new major version.
	$ ncu -u
	It will update only 'package.json', subsequently, we will have to run 'npm update' to upgrade packages