To set username & email address:
	$ git config --global user.name "John Doe"
	$ git config --global user.email johndoe@example.com

To check your configuration settings at perticular point:
	$ git config --list

You can also check what Git thinks a specific key’s value is by typing git config <key>:
	$ git config user.name

To check, configuration source file for a particular config key
	$ git config --show-origin user.name

Undo changes in a file (before "git add <file path>")
	$ git checkout -- <file path>




Refrence: Pro Git (Book)
////////////////////////////////////////////////////////////////////////////////////////////////////



Basic
=====
$ git status		"check status"


Branching & Merging
===================
$ git branch											"List branches (the asterisk denotes the current branch)"
$ git branch -a										"List all branches (local and remote)"
$ git branch [branch name]							"Create a new branch"
$ git branch [branch name] [commit id]	"Create a new branch from specific commit"
$ git branch -d [branch name]							"Delete a branch"
$ git push origin --delete [branchName]				"Delete a remote branch"
$ git checkout -b [branch name]						"Create a new branch and switch to it"
$ git checkout -b [branch name] origin/[branch name]	"Clone a remote branch and switch to it"
$ git checkout [branch name]							"Switch to a branch"
$ git checkout -										"Switch to the branch last checked out"
$ git checkout -- [file-name.txt]						"Discard changes to a file"
$ git merge [branch name]								"Merge a branch into the active branch"
$ git merge [source branch] [target branch]			"Merge a branch into a target branch"
$ git stash											"Stash changes in a dirty working directory"
$ git stash clear										"Remove all stashed entries"


Inspection & Comparison
=======================
$ git log										"View changes"
$ git log --summary							"View changes (detailed)"
$ git diff [source branch] [target branch]	"Preview changes before merging"

Reference Link: https://github.com/joshnh/Git-Commands


To print the log of specified file
	$ git log --follow [file path]
	For Detaild View
	$ git log --follow -p -- [file path]

To view git tree
	$ git log --graph --all --oneline --decorate

To view the log of specified file
	$ gitk [file path]



For checking difference between two commits
	$ git diff oldCommit..newCommit
	Example:
	$ git diff k73ud..dj374

OR (1 space, not more):
	$ git diff oldCommit newCommit
	Example:
	$ git diff k73ud dj374

OR if we need to get only files names (e.g. to copy hotfix them manually):
	$ git diff k73ud dj374 --name-only

And we can get changes applied to another branch:
	$ git diff k73ud dj374 > my.patch
	$ git apply my.patch

Reference Link: https://stackoverflow.com/questions/3368590/show-diff-between-commits/51139381


==================================================================
START: Adding an existing project to GitHub using the command line
==================================================================
Initialize the local directory as a Git repository.
	$ git init

Add the files in your new local repository. This stages them for the first commit.
	$ git add .
	# Adds the files in the local repository and stages them for commit. To unstage a file, use 'git reset HEAD YOUR-FILE'.

Commit the files that you've staged in your local repository.
	$ git commit -m "First commit"
	# Commits the tracked changes and prepares them to be pushed to a remote repository. To remove this commit and modify the file, use 'git reset --soft HEAD~1' and commit and add the file again.

In Terminal, add the URL for the remote repository where your local repository will be pushed.
	$ git remote add origin [remote repository URL]
	# It will set the new remote
	$ git remote -v
	# Verifies the new remote URL

Push the changes in your local repository to GitHub.
	$ git push -u origin master
	# Pushes the changes in your local repository up to the remote repository you specified as the origin

Refrence Link: https://help.github.com/en/articles/adding-an-existing-project-to-github-using-the-command-line
================================================================
END: Adding an existing project to GitHub using the command line
================================================================


Clone all branches and checkout specified branch
	$ git clone --branch [branch name] [remote repository url]

Clone single branch (prevent fetching of all branches)
	$ git clone --branch [branch name] --single-branch [remote repository url]

Clone last commit from specified branch
	$ git clone --branch [branch name] --depth 1 [remote repository url]

Changing a remote's URL
	$ git remote set-url [remote name] [remote url]
	Example:
	$ git remote set-url origin https://github.com/USERNAME/REPOSITORY.git


If you want only the remote URL, or referential integrity has been broken:
	$ git config --get remote.origin.url
OR
	$ git config remote.origin.url

We have another command to get remote URL
	$ git remote -v

If you require full output or referential integrity is intact:
	$ git remote show origin

To list down all configuration settings with origins where they defined
	$ git config --list --show-origin


To rename file
	$ git mv [old file path] [new file path]


To move HEAD to some previous commit
	$ git reset --hard [commit hash]

To remove last commit
	$ git reset --soft HEAD~1
	Note the --soft flag: this makes sure that the changes in undone revisions are preserved. After running the command, you'll find the changes as uncommitted local modifications in your working copy.

To create an alias of git command
	$ git config --global alias.[alias name] "[git command]"
	Example:
	$ git config --global alias.tree "log --graph --all --oneline --decorate"



============
START: Stash
============
The git stash command takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then reverts them from your working copy.
	$ git stash

Re-applying stashed changes
	$ git stash pop

Alternatively, reapply the changes to working copy and keep them in stash with
	$ git stash apply


Reference:
	https://www.atlassian.com/git/tutorials/saving-changes/git-stash#:~:text=The%20git%20stash%20command%20takes,On%20branch%20master
==========
END: Stash
==========


===========
START: TAGs
===========
Create tag
	$ git tag -a v1.0.0 -m "initial release"

Push local tags to remote repository
	$ git push --tags

Delete local tag '12345'
	$ git tag -d 12345

Delete remote tag '12345' (eg, GitHub version too)
	$ git push origin :refs/tags/12345

Alternative approach
	$ git push --delete origin tagName
	$ git tag -d tagName
=========
END: TAGs
=========




==========================
START: Create Pull Request
==========================

Step 1: From your project repository, bring in the changes and test.

	$ git fetch origin
	$ git checkout -b mongo origin/mongo
	$ git merge master

Step 2: Merge the changes and update on GitHub.

	$ git checkout master
	$ git merge --no-ff mongo
	$ git push origin master






######################################################################################
Reference:
	https://stackoverflow.com/questions/2529971/what-is-the-head-in-git/46350644#46350644

$ git checkout HEAD~1
will actually GO/checkout to 1 commit/reference before

$ git reset HEAD~3
will uncommit your last 3 commits — without removing the changes, ie you can see all the changes made in the last 3 commits together, remove anything you don't like or add onto it and then commit them all again.

$ git reset --hard HEAD~3
will uncommit your last commit and remove their changes. It will completely remove those changes. For more see here.

$ git diff HEAD~3
to look into the changes of the last 3 commits

$ git revert --no-commit HEAD~3..HEAD
Make a new commit by reverting last 3 commits


To be studied:
	https://stackoverflow.com/questions/1338728/delete-commits-from-a-branch-in-git
	https://stackoverflow.com/questions/1463340/how-to-revert-multiple-git-commits
	https://opensource.com/article/18/6/git-reset-revert-rebase-commands
######################################################################################