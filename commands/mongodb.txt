====================
START: MongoDB linux
====================
To install
	$ sudo apt-get install mongodb

To check status
	$ sudo service mongodb status

To start
	$ sudo service mongodb start

To stop
	$ sudo service mongodb stop

Reference:
	https://docs.microsoft.com/en-us/windows/wsl/tutorials/wsl-database
==================
END: MongoDB linux
==================

To check status
	$ sudo service --status-all

=======================
START: File Permissions
=======================
/var/lib/mongodb
/var/log/mongodb

chown -R mongodb:mongodb /var/lib/mongodb
chown mongodb:mongodb /tmp/mongodb-27017.sock

sudo service mongod restart
=====================
END: File Permissions
=====================

==================================================
START: Implementing Replica Set (on single server)
==================================================
Primary Node:
	Port: 2717
	DB Path: ./mongo/db1
	CMD: mongod --port 2717 --dbpath /mongo/db1 --replSet myReplicaSet

Secondary Node:
	Port: 2727
	DB Path: ./mongo/db2
	CMD: mongod --port 2727 --dbpath /mongo/db2 --replSet myReplicaSet

Secondary Node:
	Port: 2737
	DB Path: ./mongo/db3
	CMD: mongod --port 2737 --dbpath /mongo/db3 --replSet myReplicaSet


Some useful commands we are going to use:
On Primary Node
	$ rs.status()
		Tells the status of replica set

	$ rs.initiate()
		Initiates a replica set on primary node

	$ rs.add("localhost:2727")
		Adds a member to replica set

	$ rs.remove("localhost:2727")
		Removes a member from replica set


To connect mongodb we use
	typically
		mongodb://localhost:27017

	For, Replica sets
		mongodb://localhost:2717,localhost:2727,localhost:2737/?replicaSet=rsName


Let's start some action
-----------------------
Go to terminal and create 3 directories for replica set.
	$ mkdir -p mongo/db1 mongo/db2 mongo/db3

Start first mongodb instance
	$ mongod --port 2717 --dbpath ./mongo/db1 --replSet myReplicaSet

Similarly, open terminal tabs and start 2 more instances
	$ mongod --port 2727 --dbpath ./mongo/db2 --replSet myReplicaSet
	$ mongod --port 2737 --dbpath ./mongo/db3 --replSet myReplicaSet


Now, we have 3 instances of mongodb but, they are not part of replica set yet.
Let's join them in replica set.

Create new terminal tab and connect one mongodb instance
	$ mongo --port 2717

Check instance status
	$ rs.status()

Status will show "no replica set has been received".
For configuration, we can provide either a configuration file or simply provide parameters in command-line.

Let's initialise replica set.
	$ rs.initiate()

If we check the status again, we can see lot of details
	$ rs.status()

Let's add other instances as a member of replica set.
	$ rs.add("localhost:2727")

Similarly, add third instance
	$ rs.add("localhost:2737")


Let's add some data in primary node.
	$ show dbs
	$ use testingdb
	$ db.users.insert({ "name": "Usman Akram" })

Let's connect to secondary instance and find out whether it has same data available.
	$ mongo --port 2727
	$ show dbs

It will show error, because by default, we can read data only by primary node.
To read form secondary node, run following command
	$ rs.slaveOk()
	WARNING: slaveOk() is deprecated and may be removed in the next major release. Please use secondaryOk() instead.


To connect MongoDB Compus with replica set, use following uri
	mongodb://localhost:2717,localhost:2727,localhost:2737?repliaSet=myReplicaSet


Reference:
	https://www.youtube.com/watch?v=gChzfhVGqp8

================================================
END: Implementing Replica Set (on single server)
================================================


mongorestore -d db_name dump_folder_path

List databases
	show dbs

Switch database
	use database_name

List tables/collections
	show collections

Show table/collection content
	db.collectionName.find()
	OR
	db.colectionName.find().pretty()

To drop database
	1) use database_name
	2) db.dropDatabase()

List indexes
	db.collection.getIndexes()

Clone a collection (does not copy indexes)
	db.myoriginal.aggregate([{ $out: "mycopy" }])

To import from a json file
	$ mongoimport --db <database name> --collection <collection name> --file <json file path> --jsonArray
	$ mongoimport --uri=mongodb+srv://<username>:<password>@ludomumbai.bay21.mongodb.net/<database name> --collection <collection name> --file <filename>.json --jsonArray

To import from complete folder
	$ cd <json files directory path>
	$ ls -1 *.json | while read jsonfile; do mongoimport -d <database name> --file $jsonfile --type json; done




Create MongoDB Service in Windows. First Open cmd with administrator
	$ mongod --port 27017 --dbpath "a mongodb storage actual path e.g: d:\mongo_storage\data" --logpath="a log path e.g: d:\mongo_storage\log\log.txt" --install --serviceName "MongoDB"

After that
Start Service
	$ net start MongoDB
	$ net start mongodb
Stop Service
	$ net stop MongoDB
	$ net stop mongodb




To export
	$ mongoexport --db=ludoapp --collection=dices --out=dices.json
	$ mongoexport --uri=mongodb+srv://<username>:<password>@ludomumbai.bay21.mongodb.net/<database name> --collection=<collection name> --out=<filename>.json

=============================
START: MongoDB Database Tools
=============================
To create dump
	$ mongodump --db=<database-name> --collection=<collection-name>
	Options:
	(Options can be use as --db=<database-name> OR --db <database-name> OR /db:<database-name>)
		/host:<hostname>
		/port:<port>
		--uri <mongodb-uri-connection-string>
		--username <username>
		--password <password>
		--db=<database-name>
		--collection=<collection-name>
		--out:<directory-path>
		--archive=<file-path>
		--excludeCollection=<collection-name>
		--excludeCollectionsWithPrefix=<collection-prefix>

	Example:
	$ mongodump --db=ludoapp
	$ mongodump --uri=mongodb+srv://<username>:<password>@cluster0.bay21.mongodb.net/<database name> --forceTableScan

To restore
	$ mongorestore --port=<27017 is default port> --db=<database name> <dumped files directory path>
	Options:
		--port=<27017 is default port>
		--db=<database name>

	Example:
	$ mongorestore --db=RealtyReserve "/Volumes/Data/work/projects/nowasys/realityReserve/realityreserve/db_dump/RealtyReserve/"
	$ mongorestore --db=ludoapptmp ./dump/ludoapp
	Restore MongoDB Atlas
	$ mongorestore --uri mongodb+srv://<username>:<password>@cluster0.ntqhr.mongodb.net/<database name> <dumped files directory path>




Quick overview of the status of a currently running mongod or mongos instance.
	$ mongostat

To track the amount of time a MongoDB instance mongod spends reading and writing data
	$ mongotop

Reference:
	https://docs.mongodb.com/database-tools/
===========================
END: MongoDB Database Tools
===========================


/d/localhost/htdocs/projects/LudoApp/Docs/mongodb-database-tools/bin/mongodump --db=ludoapp --excludeCollectionsWithPrefix=user
/d/localhost/htdocs/projects/LudoApp/Docs/mongodb-database-tools/bin/mongodump /db:ludoapp /excludeCollectionsWithPrefix:user





==============
START: Queries
==============
Equality Filter:
The { item : null } query matches documents that either contain the item field whose value is null or that do not contain the item field.
	$ db.inventory.find( { item: null } )

Existence Check:
The following example queries for documents that do not contain a field. [1]
	$ db.inventory.find( { item : { $exists: false } } )


Return the Specified Fields and the _id Field Only:
A projection can explicitly include several fields by setting the <field> to 1 in the projection document. The following operation returns all documents that match the query. In the result set, only the item, status and, by default, the _id fields return in the matching documents.
	$ db.inventory.find( { status: "A" }, { item: 1, status: 1 } )

Delete multiple documents:
	$ db.inventory.deleteMany({})


db.users.find({ isBot: true, board: null }).count()
db.users.find({ isBot: true, board: null, teamId: null, FB: { $ne: null } }).count()
db.users.find({ isBot: true, board: null, teamId: null, FB: null }).count()



db.users.find({ isBot: true, board: null, teamId: null, FB: null }).count()
db.users.deleteMany({ isBot: true, board: null, teamId: null, FB: null })
db.users.updateOne({"_id" : ObjectId("6010d43765c741de8b008944")}, { $unset: { board: 1 } })


db.purchases.aggregate([
  { $match: { status: null } },
  { $group: { _id: "$user", count: { $sum: 1 } } },
  { $sort: { count: -1 } }
])


Join users & boards collections
-------------------------------
{
   $lookup:
     {
       from: <collection to join>,
       localField: <field from the input documents>,
       foreignField: <field from the documents of the "from" collection>,
       as: <output array field>
     }
}

db.users.aggregate([
	{
		$lookup: {
			from: 'boards',
			localField: 'board.id',
			foreignField: '_id',
			as: 'board_docs'
		}
	},
	{ $match: { board: { $ne: null } } },
	{ $limit: 1 }
])


Clear board from user object:
db.users.find({ board: { $ne: null }, 'board.id': null }).pretty()
db.users.updateMany({ board: { $ne: null }, 'board.id': null }, { $unset: { board: 1 } })

db.users.aggregate([
	{
		$lookup: {
			from: 'boards',
			localField: 'board.id',
			foreignField: '_id',
			as: 'board_docs'
		}
	},
	{ $match: { board: { $ne: null }, board_docs: [] } },
	{ $limit: 1 }
])

db.users.aggregate([
	{
		$lookup: {
			from: 'boards',
			localField: 'board.id',
			foreignField: '_id',
			as: 'board_docs'
		}
	},
	{ $match: { board: { $ne: null }, } },
	{ $sort: { 'board_docs.createdAt': -1 } }
]).pretty()

Get count:
db.users.aggregate([
	{
		$lookup: {
			from: 'boards',
			localField: 'board.id',
			foreignField: '_id',
			as: 'board_docs'
		}
	},
	{ $match: { board: { $ne: null }, } },
	{ $count: 'userCount' }
])


Find on array length
--------------------
db.users.find({ "$expr": { $gt: [{ $size: "$friends.FB" }, 2] } })


Filter on string length
-----------------------
db.users.find({
  "deviceId": { "$exists": true },
  "$expr": { "$lt": [ { "$strLenCP": "$deviceId" }, 5 ] }
})

==============
END: Queries
==============