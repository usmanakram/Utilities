To start redis server
  $ redis-server &

To check
  $ ps -ef | grep redis

To open redis cli
  $ redis-cli

==============
START: STRINGS
==============
To set string
  $ set name Usman

To get string
  $ get name

To get a range of characters from string
  $ getrange name 0 2

To set multiple string
  $ mset name Usman email usman.akram99@gmail.com

To get multiple values
  $ mget name email

To get length of string (it will return 0, if key not present)
  $ strlen name

============
END: STRINGS
============

==============
START: INTEGER
==============
To store integer
  $ set count 1

To increment/decrment an integer by 1
  $ incr count
  $ decr count

To increment/decrement an integer by a number other than 1
  $ incrby count 3
  $ decrby count 3

To store float type value
  $ set pi 3.14

To increment float type value
  $ incrbyfloat pi 0.001

============
END: INTEGER
============

To set expiry of a key
  $ expire a 10

To check remaining time
  $ ttl [key]

To set expiration while creating
  $ setex [key] [time in seconds] [value]

To get all keys
  $ keys *

To remove all data
  $ flushall

==================
START: Redis Lists
==================
To add list
  $ lpush [key] [value]
  $ lpush country Pakistan

To get list
  $ lrange [key] [start] [stop]
  $ lrange country 0 1

To get whole list
  $ lrange [key] 0 -1

To push data in bottom of the list
  $ rpush [key] [value]

To get length of list(it will return 0, if key not present)
  $ llen [key]

To remove data form top of the list
  $ lpop [key]

To remove data form bottom of the list
  $ rpop [key]

To change a value inside list
  $ lset [key] [index] [value]

To inset data before some value inside in list
  $ linsert [key] before [find value inside list] [value that need to be inserted]

To inset data after some value inside in list
  $ linsert [key] after [find value inside list] [value that need to be inserted]

To get value at specific index
  $ lindex [key] [index]

To check if the list exist then only add the value into list otherwise won't add
  $ lpushx [key] [value]
  $ rpushx [key] [value]

To sort data alphabatically
  $ sort [key] [ALPHA]
  For decending order
  $ sort [key] desc [ALPHA]



It will block the execution till it has any value to remove
[ need to watch again 20:30 ]


================
END: Redis Lists
================

=================
START: Redis Sets
=================
Sets prevent duplication, it means that all values in a set will be unique.

To create set
  $ sadd [key] [value]
  $ sadd [key] [value] [value] ...

To get all members of set
  $ smembers [key]

If you add a value that already exist, it will retrun 0

To count members of set
  $ scard [set]

To check if a value exist
  $ sismember [set] [value]

To find difference between two Sets
  $ sdiff [set one] [set two]

To sotre difference in another set
  $ sdiffstore [destination set] [set to compare] [set to compare]

To find common elements inside Sets
  $ sinter [set one] [set two]

To store common elements in another Set
  $ sinterstore [destination set] [1st set to compare] [2nd set to compare]

To union
  $ sunion [set one] [set two] [set three] ...

To store union result in another set
  $ sunionsotre [destination set] [set one] [set two] [set three] ...

===============
END: Redis Sets
===============

========================
START: Redis Sorted Sets
========================
To create sorted set
  $ zadd users 1 Usman
  $ zadd users 2 Zeeshan 3 Ali

To get sorted set
  $ zrange [key] [start] [end]
  $ zrange users 0 -1

To get with scores
  $ zrange users 0 -1 withscores

To get in reverse order
  $ zrevrange [key] [start] [stop]
  $ zrevrange users 0 -1

To get in reverse order by score
  $ zrevrangebyscore [key] [max] [min]
  $ zrevrangebyscore users 5 0 withscores

To
  $ zcard users

To
  $ zcount users -iinf +inf

To
  $ zcount users 0 4

To remove elements
  $ zrem [key] [value]
  $ zrem users Usman

To get score of any member inside sorted set
  $ zscore [key] [value]
  $ zscore users Usman

To increment score
  $ zincrby [key] [increment] [member]
  $ zincrby users 2 Usman

To remove value based on scores
  $ zremrangebyscore [key] [min] [max]

To remove based on rank
  $ zremrangebyrnak [key] [start] [stop]
  $ zremrangebyrnak users 0 2

======================
END: Redis Sorted Sets
======================

========================
START: Redis HyperLogLog
========================
It is a probablistic data structure used to count unique values. These value can be anything.
For example: IP addresses of visitors of website, search terms, email addresses, unique count of locations, etc


======================
END: Redis HyperLogLog
======================

===================
START: Redis Hashes
===================
To create
  $ hset [hash name] [field] [value]
  $ hset user name Usman

To get all hash keys
  $ hkeys [hash name]

To get all hash values
  $ hvals [hash name]

To get all keys and values inside hash
  $ hgetall [hash name]

To check, if perticular key exist in hash
  $ hexists [hash name] [field]

To get the length of hash
  $ hlen [hash name]

To set multiple values in hash
  $ hmset [hash name] [key] [value] [key] [value] ...

To get multiple values from hash
  $ hmget [hash name] [key] [key] ...

To increment key inside hash
  $ hincrby [hash name] [field] [increment]

To increment floating value
  $ hincrbyfloat [hash name] [field] [increment]

To remove field from hash
  $ hdel [hash name] [field] [field] ...

To get length of any field
  $ hstrlen [hash name] [field]

To set field, if not exist
  $ hsetnx [hash name] [field] [value]

=================
END: Redis Hashes
=================

=========================
START: Redis Transactions
=========================
=======================
END: Redis Transactions
=======================

===================
START: Redis PubSub
===================
=================
END: Redis PubSub
=================

====================
START: Redis Scripts
====================
==================
END: Redis Scripts
==================

===================================
START: Redis Connections & Security
===================================
=================================
END: Redis Connections & Security
=================================

=======================
START: Redis Geospatial
=======================
=====================
END: Redis Geospatial
=====================

=======================
START: Redis Benchmarks
=======================
=====================
END: Redis Benchmarks
=====================

Reference: https://www.youtube.com/watch?v=XCsS_NVAa1g






To get all commands
  $ command

Get command detail
  $ command info [command_name [command_name...]]

Get information and statistics about the server
  $ info

To check memory problems
  $ memory doctor

Show allocator internal stats
  $ memory malloc-stats

Show memory usage detail
  $ memory stats

Check memory usage of a key
  $ memory usage [key]

Listen for all requests received by the server in real time
  $ monitor

Remove expiration from key
  $ persist [key]

Get the time to live for a key in milliseconds
  $ pttl [key]

Get the time to live for a key in seconds
  $ ttl [key]

Get current server time
  $ time

Determine the type stored at key
  $ type

Get human readable latency analysis report
  $ latency doctor


Reference: https://redis.io/commands
