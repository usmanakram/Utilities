Playlist link:
https://www.youtube.com/watch?v=wi-MGFhrad0&list=PLhW3qG5bs-L99pQsZ74f-LC-tOEsBp2rK&index=1

////////////////////////////////////////////////////////////////////////////////////

===========================================
Tutorial 4 - How to install DOCKER on LINUX
===========================================
Source link: 
https://www.youtube.com/watch?v=KCckWweNSrM


Play with Docker:
https://labs.play-with-docker.com/

To Install DOCKER
	sudo yum -y update
	sudo yum install -y docker

To check version
	docker --version

To start DOCKER
	sudo service docker start

To add new user
	sudo usermod -a -G docker "your new user"

To get docker info
	docker info

To view images
	docker images

To view running containers
	docker ps

To view all containers
	docker ps -a

To pull image from repository
	docker pull "image name"

To run (auto pull before run, if do not exist locally) an image
	docker run "image name"

To stop DOCKER
	sudo service docker stop

To uninstall DOCKER
	sudo yum remove docker

////////////////////////////////////////////////////////////////////////////////////

==================================
Tutorial 7 - Docker Basic Commands
==================================
Source link: 
https://www.youtube.com/watch?v=HqBMEmoAd1M


To reduce the length of terminal string
	export PS1="\u$ "

=====
Basic
=====
To get the info of docker Server & Client
	docker version

To view docker version (brief info)
	docker -v
	OR
	docker --version

To view docker version (detailed info)
	docker info

To get help
	docker --help

To login hub.docker.com
	docker login

======
Images
======
To view list of all pulled images
	docker images

To view only ID's of pulled(available locally) images
	docker images -q

To pull image from repository (hub.docker.com)
	docker pull "image name"

To remove image
	docker rmi "image name"

To remove image (forcefully)
	docker rmi -f "image name"

==========
Containers
==========
To view list of containers
	docker ps

To view list of (all) containers
	docker ps -a

To run (auto pull before run, if do not exist locally) a container
	docker run "image name"

To run image in interactive mode
	docker run -it "image name"

To start container
	docker start "container id/name"

To stop container
	docker stop "container id/name"

======
System
======
To view the detail of running containers
	docker stats

To view disc usage of docker 
	docker system df

To remove unused data
	docker system prune

////////////////////////////////////////////////////////////////////////////////////

========================================
Tutorial 8 - How to create Docker Images
========================================
Source link:
https://www.youtube.com/watch?v=QBOcKdh-fwQ


Q. What are images?
A. Docker images are templates used to create Docker containers. 
	Container is a running instance of image.
Q. Where are images stored?
A. Registries (e.g. docker hub)

To pull image from repository (hub.docker.com)
	docker pull "image name":"image tag"

To view images (have not associated with containers)
	docker images -f "dangling=false"

To view IDs of images (have not associated with containers)
	docker images -f "dangling=false" -q

To create a named container with interactive mode
	docker run --name MyUbuntu1 -it ubuntu bash

To inspect image
	docker inspect "image name"

To view the history of image
	docker history "image name"

Note:
	- By run an image means to create a container out of an image.
	- Before removing image, we have to stop & remove the container.

////////////////////////////////////////////////////////////////////////////////////

============================================
Tutorial 9 - How to create Docker Containers
============================================
Source link:
https://www.youtube.com/watch?v=Rv3DAJbDrS0


Notes:
	- Containers are the running instances of docker images. Whenever you run an image it creates a container.
	- Docker build is used to create a docker image using docker file.

========
COMMANDS
========
To create a named container with interactive mode
	docker run --name MyUbuntu1 -it ubuntu

To start the container
	docker start ContainerName/ID

To stop the running container
	docker stop ContainerName/ID

To pause the running container
	docker pause ContainerName/ID

To unpause the container
	docker unpause ContainerName/ID

To view processes of the container
	docker top ContainerName/ID

To view the stats of the running container
	docker stats ContainerName/ID

To attach the container
	docker attach ContainerName/ID

To kill or remove the running container
	docker kill ContainerName/ID

To remove container
	docker rm ContainerName/ID

To view the history of the image
	docker history ImageName/ID

////////////////////////////////////////////////////////////////////////////////////

================================================
Tutorial 11 - How to create and build Dockerfile
================================================
Source link:
https://www.youtube.com/watch?v=LQjaJINkQXY


A text file with instructions to build image
Automation of Docker Image Creation

FROM
RUN
CMD

Note:
	- RUN gets executed during building of the image
	- Command, inside CMD brace, executed when container created out of the image

STEP 1 : CREATE A FILE NAMED Dockerfile

STEP 2 : ADD INSTRUCTIONS IN Dockerfile

========================
START Dockerfile content
========================
# getting base image ubuntu
FROM ubuntu

MAINTAINER usman akram <usman.akram99@gmail.com>

RUN apt-get update

CMD ["echo", "Hello World...! from my first docker image"]
======================
END Dockerfile content
======================

STEP 3 : BUILD Dockerfile TO CREATE IMAGE

To build the image
	docker build .

Complete command:
	docker build -t ImageName:Tag directoryOfDocekrfile (put dot ".", if Dockerfile is in current directory)

STEP 4 : RUN IMAGE TO CREATE CONTAINER

To create container
	docker run image "image ID"

////////////////////////////////////////////////////////////////////////////////////

===============================================
Tutorial 12 - How to create docker compose file
===============================================
Source link:
https://www.youtube.com/watch?v=HUpIoF_conA


Docker compose
: tool for defining & running multi-container docker applications
: use yaml files to configure application services (docker-compose.yml)
: can start all services with a single command : docker compose up
: can stop all services with a single command : docker compose down
: can scale up selected services when required


Step 1 : install docker compose
   (already installed on windows and mac with docker)
   docker-compose -v
   OR
   docker-compose --version

   docker-compose version
   
   2 Ways to install at linux

   1.  https://github.com/docker/compose/releases

   2. Using PIP
    pip install -U docker-compose

Step 2 : Create docker compose file at any location on your system
   docker-compose.yml

================================
START docker-compose.yml content
================================
version: '3'

services:

  web:
    image: nginx
    ports:
      - 9090:80

  database:
    image: redis
==============================
END docker-compose.yml content
==============================

Step 3 : Check the validity of file by command
    docker-compose config

Step 4 : Run docker-compose.yml file by command
   docker-compose up -d

Steps 5 : Bring down application by command
   docker-compose down

TIPS
How to scale services

—-scale
docker-compose up -d --scale database=4

////////////////////////////////////////////////////////////////////////////////////

===================================
Tutorial 13 - How to create Volumes
===================================
Source link:
https://www.youtube.com/watch?v=VOK06Q4QqvE


Volumes are the preferred mechanism for persisting data generated by and used by Docker containers


: docker volume  //get information
: docker volume create
: docker volume ls
: docker volume inspect
: docker volume rm
: docker volume prune


Use of Volumes
===========
Decoupling container from storage
Share volume (storage/data) among different containers
Attach volume to container
On deleting container volume does not delete



Commands
docker run --name MyJenkins1 -v myvol1:/var/jenkins_home -p 8080:8080 -p 50000:50000 jenkins
docker run --name MyJenkins2 -v myvol1:/var/jenkins_home -p 9090:8080 -p 60000:50000 jenkins
docker run --name MyJenkins3 -v /Users/raghav/Desktop/Jenkins_Home:/var/jenkins_home -p 9191:8080 -p 40000:50000 jenkins

Testing:
docker run --name MyJenkins1 -v /Users/usmanakram/Desktop/docker/tutorial13/Jenkins_Home:/var/jenkins_home -p 8080:8080 -p 50000:50000 jenkins
docker run --name MyJenkins2 -v /Users/usmanakram/Desktop/docker/tutorial13/Jenkins_Home:/var/jenkins_home -p 9090:8080 -p 60000:50000 jenkins





NOTES

By default all files created inside a container are stored on a writable container layer

The data doesn’t persist when that container is no longer running

A container’s writable layer is tightly coupled to the host machine where the container is running. You can’t easily move the data somewhere else.

Docker has two options for containers to store files in the host machine
so that the files are persisted even after the container stops

VOLUMES  and  BIND MOUNTS

Volumes are stored in a part of the host filesystem which is managed by Docker

Non-Docker processes should not modify this part of the filesystem

Bind mounts may be stored anywhere on the host system

Non-Docker processes on the Docker host or a Docker container can modify them at any time

In Bind Mounts, the file or directory is referenced by its full path on the host machine. 


Volumes are the best way to persist data in Docker

volumes are managed by Docker and are isolated from the core functionality of the host machine

A given volume can be mounted into multiple containers simultaneously.

When no running container is using a volume, the volume is still available to Docker and is not removed automatically. You can remove unused volumes using "$ docker volume prune".

When you mount a volume, it may be named or anonymous. 

Anonymous volumes are not given an explicit name when they are first mounted into a container

Volumes also support the use of volume drivers, which allow you to store your data on remote hosts or cloud providers, among other possibilities.

////////////////////////////////////////////////////////////////////////////////////

========================================
Tutorial 14 - How to create Docker Swarm
========================================
Source link:
https://www.youtube.com/watch?v=bU2NNFJ-UXA


Docker Swarm


Today we will learn :

1. What is Docker Swarm
2. Why to use it
3. How to create and manage Docker Swarm
4. Create service on docker swarm
5. Scaling services up and down
6. Features/Helpful Tips



A swarm is a group of machines that are running Docker and joined into a cluster 


Docker Swarm is a tool for Container Orchestration.

Let’s take an example
You have 100 containers
You need to do 
- Health check on every container
- Ensure all containers are up on every system
- Scaling the containers up or down depending on the load
- Adding updates/changes to all the containers

Orchestration - managing and controlling multiple docker containers as a single service
Tools available - Docker Swarm, Kubernetes, Apache Mesos



Pre-requisites
1. Docker 1.13 or higher
2. Docker Machine (pre installed for Docker for Windows and Docker for Mac)
https://docs.docker.com/machine/install-machine/#installing-machine-directly
https://docs.docker.com/get-started/part4/


To check whether docker machine installed
	docker-machine -v


Step 1 :  Create Docker machines (to act as nodes for Docker Swarm)   Create one machine as manager and others as workers
    FOR WINDOWS
      docker-machine create --driver hyperv manager1
    FOR MAC
      docker-machine create --driver virtualbox manager1

   docker-machine:Error with pre-create check: “exit status 126”
   https://stackoverflow.com/questions/38696164/docker-machineerror-with-pre-create-check-exit-status-126
      brew cask install virtualbox;

   Create one manager machine
   and other worker machines


Step 2 :  Check machine created successfully
    docker-machine ls
    docker-machine ip manager1

    Let's create some other machines
    docker-machine create --driver virtualbox worker1
    docker-machine create --driver virtualbox worker2


Step 3 :  SSH (connect) to docker machines with three different tabs
    docker-machine ssh manager1
    docker-machine ssh worker1
    docker-machine ssh worker2


Step 4 :  Initialize Docker Swarm
	Run following command on machine which you want to make manager.
    docker swarm init --advertise-addr MANAGER_IP
    docker node ls
    (this command will work only in swarm manager and not in worker)


Step 5 :  Join workers in the swarm
    Get command for joining as worker
    In manager node run command
      docker swarm join-token worker
    This will give command to join swarm as worker

      docker swarm join-token manager
    This will give command to join swarm as manager

    SSH into worker node (machine) and run command to join swarm as worker
   
    In Manager, Run command - "docker node ls" to verify worker is registered and is ready
  
    Do this for all worker machines


Step 6 :  On manager run standard docker commands
    docker info
    check the swarm section 
    no of manager, nodes etc

    Now check docker swarm command options 
    docker swarm 


Step 7 :  Run containers on Docker Swarm
    docker service create --replicas 3 -p 80:80 --name serviceName nginx

    Check the status:
    docker service ls
    docker service ps serviceName
   
    Check the service running on all nodes
    Check on the browser by giving ip for all nodes


Step 8 :  Scale service up and down
   On manager node 
   docker service scale serviceName=2
 

Inspecting Nodes (this command can run only on manager node)
docker node inspect nodename
docker node inspect self
docker node inspect worker1


Step 9 : Shutdown node
   docker node update --availability drain worker1


Step 10 :  Update service
   docker service update --image imagename:version web
   docker service update --image nginx:1.14.0 serviceName


Step 11 :  Remove service
   docker service rm serviceName


To leave the swarm, run on leaving node
	$ docker swarm leave
To stop the machine, run on main terminal (outside any machine)
	$ docker-machine stop machineName
To remove the machine, run on main terminal (outside any machine)
	$ docker-machine rm machineName


REFERENCES:
https://docs.docker.com/get-started/part4/#create-a-cluster
https://rominirani.com/docker-swarm-tutorial-b67470cf8872





FAQs & Helpful Tips:

A swarm is a group of machines that are running Docker and joined into a cluster

A cluster is managed by swarm manager

The machines in a swarm can be physical or virtual. After joining a swarm, they are referred to as nodes

Swarm managers are the only machines in a swarm that can execute your commands, or authorise other machines to join the swarm as workers

Workers are just there to provide capacity and do not have the authority to tell any other machine what it can and cannot do

you can have a node join as a worker or as a manager. At any point in time, there is only one LEADER and the other manager nodes will be as backup in case the current LEADER opts out

////////////////////////////////////////////////////////////////////////////////////